require('dotenv').config(); // üîê –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env

const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');

const fs = require('fs');
const path = require('path');
const usersPath = '/root/vk-backend/users.json';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ tg_id
function getUserData(tgId) {
  if (!fs.existsSync(usersPath)) return null;
  const users = JSON.parse(fs.readFileSync(usersPath, 'utf-8'));
  return Object.values(users).find(u => String(u.tg_id) === String(tgId) && u.status === 'ok');
}

const MAX_GROUPS_FREE = 3; // —Å–∫–æ–ª—å–∫–æ –≥—Ä—É–ø–ø –≤—ã–±—Ä–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ
const UNLIMITED_USERS = [792903459, 1022172210];
const userSelectedGroups = {};

const token = process.env.TELEGRAM_BOT_TOKEN;
const SUPPORT_CHAT_ID = -4778492984; // chat_id –≥—Ä—É–ø–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏

if (!token) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω TELEGRAM_BOT_TOKEN –≤ .env');
  process.exit(1);
}

const bot = new TelegramBot(token, { polling: true });
const replyContext = {}; // –ö–æ–º—É –æ—Ç–≤–µ—á–∞–µ—Ç –º–∞–≥–∏—Å—Ç—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏
const sentPosts = {}; // { [tgUserId]: { [groupId]: [postId, ...] } }

// =========================
// 1. –°–¢–ê–†–¢, –ü–û–†–¢–ê–õ, –ü–†–ò–í–ï–¢–°–¢–í–ò–ï
// =========================

bot.onText(/\/start/, async (msg) => { // <--- –≤–æ—Ç –∑–¥–µ—Å—å –¥–æ–±–∞–≤—å async
  const chatId = msg.chat.id;
  const tgId = msg.from.id;
  const vkAuthUrl = `https://fokusnikaltair.xyz/vkid-auth.html?tg_id=${tgId}`;

  const welcomeText = `–ê–±—Ä–∞-–∫–∞–¥–∞–±—Ä–∞ –∏ –Ω–µ–º–Ω–æ–≥–æ –∫–æ–¥–∞ üßô‚Äç‚ôÇÔ∏è

–¢—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–∏–∑–≤–∞–ª –§–æ–∫—É—Å–Ω–∏–∫–∞ –ê–ª—å—Ç–∞–∏—Ä–∞ - —Ç–µ–ø–µ—Ä—å —Ç–≤–æ–∏ VK-–Ω–æ–≤–æ—Å—Ç–∏ —Å–∞–º–∏ –ø–µ—Ä–µ–ø–æ–ª–∑–∞—é—Ç –≤ Telegram –ø–æ –≤–æ–ª—à–µ–±—Å—Ç–≤—É, –∞ –Ω–µ –ø–æ –ø—Ä–∏—Ö–æ—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤.

–ó–∞–±—É–¥—å –ø—Ä–æ —É–Ω—ã–ª—ã–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –ª–µ–Ω—Ç—ã, –≤–µ–¥—å —É —Ç–µ–±—è –µ—Å—Ç—å –ª–∏—á–Ω—ã–π –º–∞–≥, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —â–µ–ª—á–∫—É –ø–∞–ª—å—Ü–µ–≤ (–∏ –∫–ª–∏–∫—É –Ω–∞ –ø–æ—Ä—Ç–∞–ª).

–ú–∞–≥–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ —Ç–≤–æ–µ–≥–æ —É—á–∞—Å—Ç–∏—è - –∞–∫—Ç–∏–≤–∏—Ä—É–π –ø–æ—Ä—Ç–∞–ª –∏ –Ω–∞—á–Ω–∏ –∫–æ–ª–¥–æ–≤–∞—Ç—å ‚ú® 
`;

  // 1. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
  await bot.sendMessage(chatId, welcomeText, {
    reply_markup: {
      inline_keyboard: [
        [{ text: '–°–æ—Ç–≤–æ—Ä–∏—Ç—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ üåÄ', url: vkAuthUrl }],
        [{ text: '–ú–∞–≥–∏—á–µ—Å–∫–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å üîê', callback_data: 'privacy' }]
      ]
    }
  });

  // 2. –°—Ä–∞–∑—É –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ ‚Äî reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥üî±"
  const sentWaitMsg = await bot.sendMessage(chatId, "–ê–∫—Ç–∏–≤–∏—Ä—É–π –ø–æ—Ä—Ç–∞–ª –∫–Ω–æ–ø–∫–æ–π –≤—ã—à–µ, –∑–∞—Ç–µ–º –∑–∞–≤–µ—Ä—à–∏ –ø–µ—Ä–µ—Ö–æ–¥ ‚ú®", {
    reply_markup: {
      keyboard: [
        ['–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥üî±']
      ],
      resize_keyboard: true,
      one_time_keyboard: true
    }
  });
  replyContext[tgId + '_waitMsg'] = sentWaitMsg.message_id;

  console.log(`üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${tgId}`);
});
// =========================
// 2. –ü–û–õ–ò–¢–ò–ö–ê –ö–û–ù–§–ò–î–ï–ù–¶–ò–ê–õ–¨–ù–û–°–¢–ò –∏ callback'–∏
// =========================

bot.on('callback_query', async (query) => {

  // --- –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã ---
if (query.data === 'search_group') {
  await bot.sendMessage(query.message.chat.id, 'üîç –í–≤–µ–¥–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:');
  userSelectedGroups[query.from.id + '_waitingForSearch'] = true;
  await bot.answerCallbackQuery(query.id);
  return;
}

// --- –í–æ–∑–≤—Ä–∞—Ç –∫ –ø–æ–ª–Ω–æ–º—É —Å–ø–∏—Å–∫—É –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ ---
if (query.data === 'back_to_all_groups') {
  const userId = query.from.id;
  // –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö!
  const allGroups = userSelectedGroups[userId + '_fullList'] || [];
  const selectMsgId = userSelectedGroups[userId + '_selectMsgId'];
  userSelectedGroups[userId + '_isSearch'] = false;
  await showGroupSelection(bot, query.message.chat.id, userId, allGroups, 0, selectMsgId, false);
  await bot.answerCallbackQuery(query.id);
  return;
}


  // --- –ú–∞–≥–∏—á–µ—Å–∫–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å (–ø–æ–ª–∏—Ç–∏–∫–∞) ---
  if (query.data === 'privacy') {
    const privacyText = `–í–∞—à–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å - –ø–æ–¥ –Ω–∞–¥—ë–∂–Ω–æ–π –∑–∞—â–∏—Ç–æ–π –º–∞–≥–∏–∏ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π üõ°
–î–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–∞–º–∏ VK-–≥—Ä—É–ø–ø. 
–¢–æ–∫–µ–Ω—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º.

–ü–æ–ª–Ω–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏:
https://api.fokusnikaltair.xyz/privacy.html`;

    await bot.sendMessage(query.message.chat.id, privacyText, {
      disable_web_page_preview: true
    });
    await bot.answerCallbackQuery(query.id);
    return;
  }

  // --- –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑ –≥—Ä—É–ø–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ---
  if (query.data.startsWith('reply_')) {
    const userId = query.data.split('_')[1];
    replyContext[query.from.id] = userId;
    await bot.sendMessage(
      query.message.chat.id,
      `‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: ${userId}), –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø—Ä—è–º–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç.`
    );
    await bot.answerCallbackQuery(query.id, { text: '–ñ–¥—É –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞!' });
    return;
  }

    // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏) ---
  if (query.data.startsWith('select_group:')) {
    const [_, groupId, page] = query.data.split(':');
    const userId = query.from.id;
    const groupIdNum = Number(groupId);

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø (–∏–ª–∏ –ø—É—Å—Ç–æ–π)
    if (!userSelectedGroups[userId]) userSelectedGroups[userId] = [];
    const selected = userSelectedGroups[userId];

     // --- –ü–†–ê–í–ò–õ–¨–ù–û: –∑–¥–µ—Å—å –ø–æ–ª—É—á–∞–µ—à—å allGroups –∏ selectMsgId!
    const allGroups = userSelectedGroups[userId + '_all'] || [];
    const selectMsgId = userSelectedGroups[userId + '_selectMsgId'];

    const isSearch = userSelectedGroups[userId + '_isSearch'] || false; 
    
     // –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞
    if (selected.includes(groupIdNum)) {
      userSelectedGroups[userId] = selected.filter(id => id !== groupIdNum);
    } else {
      const isUnlimited = UNLIMITED_USERS.includes(userId);
if (!isUnlimited && selected.length >= MAX_GROUPS_FREE) {
  await bot.answerCallbackQuery(query.id, { 
    text: '‚ú® –û, —Å–∏–ª–∞ –º–∞–≥–∏–∏ –µ—â—ë –Ω–µ —Å—Ç–æ–ª—å –≤–µ–ª–∏–∫–∞!\n–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ 3 –≥—Ä—É–ø–ø—ã - –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã.', 
    show_alert: true 
  });
  return;
}
      userSelectedGroups[userId].push(groupIdNum);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
     await showGroupSelection(bot, query.message.chat.id, userId, allGroups, Number(page), selectMsgId, isSearch);
    await bot.answerCallbackQuery(query.id);
    return;
  }

  // --- –ü–∞–≥–∏–Ω–∞—Ü–∏—è –≥—Ä—É–ø–ø ---
  if (query.data.startsWith('groups_prev:') || query.data.startsWith('groups_next:')) {
    const isPrev = query.data.startsWith('groups_prev:');
    const page = Number(query.data.split(':')[1]);
    const userId = query.from.id;
    const allGroups = userSelectedGroups[userId + '_all'] || [];
    const selectMsgId = userSelectedGroups[userId + '_selectMsgId'];
    await showGroupSelection(bot, query.message.chat.id, userId, allGroups, Number(page), selectMsgId);
  }

  // --- "–ì–æ—Ç–æ–≤–æ" ---
if (query.data === 'groups_done') {
  const selectedGroups = userSelectedGroups[query.from.id] || [];
  if (selectedGroups.length) {
  const allGroups = userSelectedGroups[query.from.id + '_all'] || [];
  const selectedGroupsNames = selectedGroups.map(id => {
    const group = allGroups.find(g => g.id === id);
    return group
      ? `ID: ${id} | –ù–∞–∑–≤–∞–Ω–∏–µ: ${group.name || group.screen_name || `ID${id}`}`
      : `ID: ${id}`;
  });
  console.log(`[–í—ã–±–æ—Ä –≥—Ä—É–ø–ø] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${query.from.id} –≤—ã–±—Ä–∞–ª:\n` + selectedGroupsNames.join('\n'));

    
  
    await bot.sendMessage(query.message.chat.id,
      `<b>–ì—Ä—É–ø–ø—ã –≤—ã–±—Ä–∞–Ω—ã! ‚ö°Ô∏è</b>\n–°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –ª–µ–Ω—Ç–∞ –Ω–∞–ø–æ–ª–Ω–∏—Ç—Å—è –º–∞–≥–∏–µ–π –∏–º–µ–Ω–Ω–æ –¥–ª—è —Ç–µ–±—è.\n\n–ñ–¥–∏ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑:\n${selectedGroupsNames.map(name => `üî∏${name}`).join('\n')}`,
      { parse_mode: 'HTML' }
    );

    await sendFreshestPostForUser(query.from.id);
    
  } else {
    await bot.sendMessage(query.message.chat.id,
      '–¢—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª ‚Äî –Ω–æ –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è üòâ'
    );
  }
  await bot.answerCallbackQuery(query.id);
  return;
}


});

// =========================
// 3. –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê (reply-–∫–Ω–æ–ø–∫–∏)
// =========================

bot.on('message', async (msg) => {
 // --- –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã ---
if (userSelectedGroups[msg.from.id + '_waitingForSearch']) {
  delete userSelectedGroups[msg.from.id + '_waitingForSearch'];
  const allGroups = userSelectedGroups[msg.from.id + '_all'] || [];
  console.log('üîç [–ü–û–ò–°–ö] allGroups:', allGroups);
  const search = msg.text.trim().toLowerCase();
  console.log('üîç [–ü–û–ò–°–ö] search text:', search);
  const results = allGroups.filter(g =>
    (g.name && g.name.toLowerCase().includes(search)) ||
    (g.screen_name && g.screen_name.toLowerCase().includes(search)) ||
    (g.title && g.title.toLowerCase().includes(search))
  );
  console.log('üîç [–ü–û–ò–°–ö] results:', results);

  userSelectedGroups[msg.from.id + '_isSearch'] = true;
  
  if (!results.length) {
    await bot.sendMessage(msg.chat.id, '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ.');
    const selectMsgId = userSelectedGroups[msg.from.id + '_selectMsgId'] || null;
    await showGroupSelection(bot, msg.chat.id, msg.from.id, results, 0, selectMsgId, true);

    return;
  }
  const selectMsgId = userSelectedGroups[msg.from.id + '_selectMsgId'] || null;
  await showGroupSelection(bot, msg.chat.id, msg.from.id, results, 0, selectMsgId, true);

  return;
}



  // 1. –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥
  if (msg.text === '–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥üî±') {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü–æ–¥–æ–∂–¥–∏, –º–∞–≥–∏—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è ‚ú®"
    const waitMsgId = replyContext[msg.from.id + '_waitMsg'];
    if (waitMsgId) {
      try { await bot.deleteMessage(msg.chat.id, waitMsgId); } catch(e){}
      delete replyContext[msg.from.id + '_waitMsg'];
    }

    const res = await axios.get(`https://api.fokusnikaltair.xyz/users/check?tg_id=${msg.from.id}`);
    if (res.data.success) {
      // –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–≤–µ—Å—Ç–µ + –∫–Ω–æ–ø–∫–∞ "–ì—Ä—É–ø–ø–∏—Å–æ –ø—Ä–∏–∑—ã–≤—É—Å! üìú"
      await bot.sendMessage(msg.chat.id, 
        `<b>üí´ –£—Ä–∞! –ö–≤–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω.</b>  \n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —É—é—Ç–Ω—ã–π –º–∏—Ä –Ω–æ–≤–æ—Å—Ç–µ–π.\n\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ: –ø—Ä–∏–∑–≤–∞—Ç—å –ª—é–±–∏–º—ã–µ –≥—Ä—É–ø–ø—ã –∏ –ø–æ–ª—É—á–∞—Ç—å –º–∞–≥–∏—á–µ—Å–∫–∏–µ –≤–µ—Å—Ç–∏ –ø—Ä—è–º–æ —Å—é–¥–∞.`,
        { parse_mode: 'HTML' }
      );
      const sentGroupWaitMsg = await bot.sendMessage(msg.chat.id, "–ì–æ—Ç–æ–≤—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ!", {
  reply_markup: {
    keyboard: [
      ['–ì—Ä—É–ø–ø–∏—Å–æ –ø—Ä–∏–∑—ã–≤—É—Å! üìú']
    ],
    resize_keyboard: true,
    one_time_keyboard: true
  }
});
replyContext[msg.from.id + '_groupWaitMsg'] = sentGroupWaitMsg.message_id;
    } else {
      await bot.sendMessage(msg.chat.id, 
        `<b>–£–ø—Å, –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –≤ –¥—É—Ö–µ üòî</b>\n\n–ü–µ—Ä–µ—Ö–æ–¥ –ø–æ–∫–∞ –Ω–µ —É–¥–∞–ª—Å—è, –Ω–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π - —Ç–∞–∫–æ–µ –±—ã–≤–∞–µ—Ç –¥–∞–∂–µ —É —Å–∞–º—ã—Ö –æ–ø—ã—Ç–Ω—ã—Ö –º–∞–≥–æ–≤!\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –¥–∞–π –º–∞–≥–∏—Å—Ç—Ä—É –∑–Ω–∞—Ç—å, –µ—Å–ª–∏ —á–∞—Ä—ã –Ω–µ —Å–ª—É—à–∞—é—Ç—Å—è. üßô‚Äç‚ôÇÔ∏è‚ú®`,
        { parse_mode: 'HTML', reply_markup: { remove_keyboard: true } }
      );
    }
    return;
  }


 // 2. –ì—Ä—É–ø–ø–∏—Å–æ –ø—Ä–∏–∑—ã–≤—É—Å!
if (msg.text === '–ì—Ä—É–ø–ø–∏—Å–æ –ø—Ä–∏–∑—ã–≤—É—Å! üìú') {
  // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ì–æ—Ç–æ–≤—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ!"
  const groupWaitMsgId = replyContext[msg.from.id + '_groupWaitMsg'];
  if (groupWaitMsgId) {
    try { await bot.deleteMessage(msg.chat.id, groupWaitMsgId); } catch(e){}
    delete replyContext[msg.from.id + '_groupWaitMsg'];
  }

  // 2.1 –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–∞–Ω–∏–µ
  await bot.sendMessage(msg.chat.id, 
    `<b>‚ú® –ü–æ—Å–ª–∞–Ω–∏–µ –æ—Ç —Å—Ç—Ä–∞–∂–µ–π –ø–æ—Ä—Ç–∞–ª–∞</b>\n–í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏, –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –≤–∏–¥–µ–æ –ø—Ä–∏—Ö–æ–¥—è—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≥—Ä—É–ø–ø VK.\n\n–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –≤–∏–¥–Ω–æ - –∑–Ω–∞—á–∏—Ç, –º–∞–≥–∏—è —á—É—Ç—å-—á—É—Ç—å —É—Å—Ç–∞–ª–∞ –∏ –Ω–µ —Å–º–æ–≥–ª–∞ –ø—Ä–æ–π—Ç–∏ –∑–∞—â–∏—Ç—É —á–∞—Ä.`,
    { parse_mode: 'HTML', reply_markup: { remove_keyboard: true } }
  );

  // 2.2 –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥—Ä—É–ø–ø—ã —Å –±—ç–∫–µ–Ω–¥–∞
  try {
    const res = await axios.get(`https://api.fokusnikaltair.xyz/users/groups?tg_id=${msg.from.id}`);
    if (!res.data.success || !res.data.groups || !Array.isArray(res.data.groups)) {
      await bot.sendMessage(msg.chat.id, '–ú–∞–≥–∏—è –Ω–µ —Å–º–æ–≥–ª–∞ –Ω–∞–π—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!');
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userSelectedGroups[msg.from.id] = [];

       // —Å–æ—Ö—Ä–∞–Ω—è–µ–º "–æ—Å–Ω–æ–≤–Ω–æ–π" –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫
    userSelectedGroups[msg.from.id + '_all'] = res.data.groups;
    userSelectedGroups[msg.from.id + '_fullList'] = res.data.groups;

    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∂–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å –≥—Ä—É–ø–ø–∞–º–∏ (–ø–æ 10 —à—Ç—É–∫, –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
    userSelectedGroups[msg.from.id + '_all'] = res.data.groups;
    await showGroupSelection(bot, msg.chat.id, msg.from.id, res.data.groups, 0, null);

  } catch (e) {
    await bot.sendMessage(msg.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø üò•');
  }
  return;
}


  // --- –ü–æ–¥–¥–µ—Ä–∂–∫–∞: –æ—Ç–≤–µ—Ç—ã –º–∞–≥–∏—Å—Ç—Ä–∞ ---
  if (replyContext[msg.from.id] && msg.chat.id === SUPPORT_CHAT_ID) {
    const targetUserId = replyContext[msg.from.id];
    bot.sendMessage(targetUserId, `üßô –ú–∞–≥–∏—Å—Ç—Ä –±–æ—Ç–∞ –æ—Ç–≤–µ—á–∞–µ—Ç:\n${msg.text}`);
    bot.sendMessage(msg.chat.id, "‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!");
    delete replyContext[msg.from.id];
    return;
  }

  // --- –ü–æ–¥–¥–µ—Ä–∂–∫–∞: –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
  if (
    msg.chat.id === SUPPORT_CHAT_ID ||
    (msg.text && msg.text.startsWith('/')) ||
    msg.from.is_bot
  ) return;

  bot.sendMessage(SUPPORT_CHAT_ID,
    `üßô –í–æ–ø—Ä–æ—Å –æ—Ç @${msg.from.username || msg.from.id} (ID: ${msg.from.id}):\n${msg.text}`, {
      reply_markup: {
        inline_keyboard: [
          [{
            text: "–û—Ç–≤–µ—Ç–∏—Ç—å",
            callback_data: `reply_${msg.from.id}`
          }]
        ]
      }
    }
  );
});

// --- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ /support ---
bot.onText(/\/support/, (msg) => {
  bot.sendMessage(msg.chat.id,
    "–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å, –ø–æ–∂–µ–ª–∞–Ω–∏–µ –∏–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏! –ú–∞–≥–∏—Å—Ç—Ä –ø—Ä–æ—á–∏—Ç–∞–µ—Ç –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç. –¢–≤–æ–π Telegram –Ω–∏–∫ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Å–∫—Ä—ã—Ç, –∞ –º–∞–≥–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —É–∂–µ —Ä—è–¥–æ–º! ‚úâÔ∏è"
  );
});

async function showGroupSelection(bot, chatId, userId, allGroups, page = 0, messageId = null, isSearch = false) {
  const MAX_GROUPS_PER_PAGE = 10;
  const selected = userSelectedGroups[userId] || [];
  let inline_keyboard = [];
  let text = "";

  if (!isSearch) {
    // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º: –ø–∞–≥–∏–Ω–∞—Ü–∏—è –∏ –≤—ã–±–æ—Ä
    const start = page * MAX_GROUPS_PER_PAGE;
    const pageGroups = allGroups.slice(start, start + MAX_GROUPS_PER_PAGE);

    inline_keyboard = pageGroups.map((group, idx) => {
      const isSelected = selected.includes(group.id);
      const groupNumber = start + idx + 1;
      return [{
        text: (isSelected ? '‚úÖ ' : '') + `${groupNumber}. ` + (group.name || group.screen_name || `ID${group.id}`),
        callback_data: `select_group:${group.id}:${page}`
      }];
    });

    // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const navButtons = [];
    if (page > 0) navButtons.push({ text: '‚¨ÖÔ∏è', callback_data: `groups_prev:${page - 1}` });
    navButtons.push({ text: '‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data: 'groups_done' });
    if (allGroups.length > start + MAX_GROUPS_PER_PAGE) navButtons.push({ text: '‚û°Ô∏è', callback_data: `groups_next:${page + 1}` });
    inline_keyboard.push(navButtons);
    inline_keyboard.push([{ text: 'üîé –ü–æ–∏—Å–∫', callback_data: 'search_group' }]);
    text = `ü¶Ñ –£ —Ç–µ–±—è –∞–∂ <b>${allGroups.length}</b> –º–∞–≥–∏—á–µ—Å–∫–∏—Ö –≥—Ä—É–ø–ø!\n–ö–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è —É –Ω–∞—Å –Ω–∞—Å—Ç—Ä–æ–π? –ö–æ—Ç–∏–∫–∏? –ù–æ–≤–æ—Å—Ç–∏? –¢—ã–∫-—Ç—ã–∫ ‚Äî –≤—ã–±–∏—Ä–∞–π!`;

  } else {
    // üî• –†–ï–ñ–ò–ú –ü–û–ò–°–ö–ê ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
    const start = page * MAX_GROUPS_PER_PAGE;
    const pageGroups = allGroups.slice(start, start + MAX_GROUPS_PER_PAGE);

    inline_keyboard = pageGroups.map((group, idx) => {
      const isSelected = selected.includes(group.id);
      const groupNumber = start + idx + 1;
      return [{
        text: (isSelected ? '‚úÖ ' : '') + `${groupNumber}. ` + (group.name || group.screen_name || `ID${group.id}`),
        callback_data: `select_group:${group.id}:${page}`
      }];
    });

    // –ö–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞/–≤–æ–∑–≤—Ä–∞—Ç–∞/–≥–æ—Ç–æ–≤–æ ‚Äî –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π!
    inline_keyboard.push([{ text: 'üîé –ü–æ–∏—Å–∫', callback_data: 'search_group' }]);
    inline_keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_all_groups' }]);
    inline_keyboard.push([{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data: 'groups_done' }]);

    text = `üîç –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø: <b>${allGroups.length}</b>\n–ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥.`;
  }

  userSelectedGroups[userId + '_all'] = allGroups;

  if (messageId) {
    await bot.editMessageText(text, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'HTML',
      reply_markup: { inline_keyboard }
    });
  } else {
    const sent = await bot.sendMessage(chatId, text, {
      parse_mode: 'HTML',
      reply_markup: { inline_keyboard }
    });
    userSelectedGroups[userId + '_selectMsgId'] = sent.message_id;
  }
}

// === –û–¢–ü–†–ê–í–ò–¢–¨ –°–†–ê–ó–£ –û–î–ò–ù –°–í–ï–ñ–ò–ô –ü–û–°–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ ===
async function sendFreshestPostForUser(tgUserId) {
  const selectedGroupIds = userSelectedGroups[tgUserId];
  if (!Array.isArray(selectedGroupIds) || !selectedGroupIds.length) return;
  const userData = getUserData(tgUserId);
  if (!userData || !userData.access_token) return;
  const vkAccessToken = userData.access_token;

  let freshestPost = null;
  let freshestGroup = null;

  for (const groupId of selectedGroupIds) {
    const owner_id = -Math.abs(groupId);
    try {
      const res = await axios.get('https://api.vk.com/method/wall.get', {
        params: { owner_id, count: 1, access_token: vkAccessToken, v: '5.199' }
      });
      const posts = (res.data.response && res.data.response.items) ? res.data.response.items : [];
      const nonAdPosts = posts.filter(post => !post.marked_as_ads);
      if (nonAdPosts.length) {
        const post = nonAdPosts[0];
        if (!freshestPost || post.date > freshestPost.date) {
          freshestPost = post;
          freshestGroup = groupId;
        }
      }
    } catch (e) { }
  }
  if (freshestPost) {
    let text = freshestPost.text || '[–±–µ–∑ —Ç–µ–∫—Å—Ç–∞]';
    const postUrl = "https://vk.com/wall" + -Math.abs(freshestGroup) + "_" + freshestPost.id;
    text += "\n\n<a href=\"" + postUrl + "\">–û—Ç–∫—Ä—ã—Ç—å –≤ VK</a>";
    await bot.sendMessage(tgUserId, text, { parse_mode: 'HTML', disable_web_page_preview: false });
    if (freshestPost.attachments && Array.isArray(freshestPost.attachments)) {
      for (const att of freshestPost.attachments) {
        if (att.type === 'photo' && att.photo && att.photo.sizes) {
          const photo = att.photo.sizes.sort((a, b) => b.width - a.width)[0];
          await bot.sendPhoto(tgUserId, photo.url);
        }
        if (att.type === 'doc' && att.doc && att.doc.url) {
          await bot.sendDocument(tgUserId, att.doc.url, { caption: att.doc.title || '' });
        }
        if (att.type === 'video' && att.video) {
          const videoUrl = "https://vk.com/video" + att.video.owner_id + "_" + att.video.id;
          await bot.sendMessage(tgUserId, "üé¨ <b>–í–∏–¥–µ–æ:</b> " + videoUrl, { parse_mode: 'HTML' });
        }
      }
    }
  }
}


// ======== [–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –†–ê–°–°–´–õ–ö–ê VK-–ü–û–°–¢–û–í –ö–ê–ñ–î–´–ï 30 –ú–ò–ù–£–¢] ========
async function sendLatestVkPosts() {
  for (const userKey in userSelectedGroups) {
    if (!/^\d+$/.test(userKey)) continue;
    const tgUserId = Number(userKey);
    const selectedGroupIds = userSelectedGroups[tgUserId];
    if (!Array.isArray(selectedGroupIds) || !selectedGroupIds.length) continue;

    const userData = getUserData(tgUserId);
    if (!userData || !userData.access_token) continue;
    const vkAccessToken = userData.access_token;

    let allNewPosts = [];

    // 1. –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –∏–∑ –≤—Å–µ—Ö –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
for (const groupId of selectedGroupIds) {
  const owner_id = -Math.abs(groupId);
  try {
    const res = await axios.get('https://api.vk.com/method/wall.get', {
      params: {
        owner_id,
        count: 5,
        access_token: vkAccessToken,
        v: '5.199'
      }
    });
    const posts = (res.data.response && res.data.response.items) ? res.data.response.items : [];
    const nonAdPosts = posts.filter(post => !post.marked_as_ads);

    sentPosts[tgUserId] = sentPosts[tgUserId] || {};
    sentPosts[tgUserId][groupId] = sentPosts[tgUserId][groupId] || [];

    // ---- –õ–û–ì–ò ----
    let newPostsHere = [];
    for (const post of nonAdPosts) {
      if (!sentPosts[tgUserId][groupId].includes(post.id)) {
        newPostsHere.push(post);
        allNewPosts.push({
          ...post,
          groupId,
          owner_id
        });
      }
    }
    if (newPostsHere.length) {
      const groupInfo = groupId + ' | ' +
        ((userSelectedGroups[tgUserId + '_all'] || []).find(g => g.id === groupId)?.name || '');
      console.log(`[–ù–æ–≤—ã–µ –ø–æ—Å—Ç—ã] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${tgUserId} | –ì—Ä—É–ø–ø–∞: ${groupInfo} | –ù–æ–≤—ã—Ö: ${newPostsHere.length}`);
      newPostsHere.forEach(post => {
        console.log(`  - post.id = ${post.id}, –¥–∞—Ç–∞ = ${new Date(post.date * 1000).toLocaleString()}`);
      });
    }
    // --------------
  } catch (e) {
    console.log('üî¥ [–û—à–∏–±–∫–∞ wall.get]:', e?.response?.data || e.message || e);
  }
}

    // 3. –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–æ—Ç —Å—Ç–∞—Ä–æ–≥–æ –∫ –Ω–æ–≤–æ–º—É)
    allNewPosts.sort((a, b) => a.date - b.date);

    // 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –û–î–ò–ù (—Å–∞–º—ã–π —Ä–∞–Ω–Ω–∏–π)
    if (allNewPosts.length) {
      const post = allNewPosts[0];
      let text = post.text || '[–±–µ–∑ —Ç–µ–∫—Å—Ç–∞]';
      const postUrl = "https://vk.com/wall" + post.owner_id + "_" + post.id;
      text += "\n\n<a href=\"" + postUrl + "\">–û—Ç–∫—Ä—ã—Ç—å –≤ VK</a>";
      await bot.sendMessage(tgUserId, text, { parse_mode: 'HTML', disable_web_page_preview: false });

      // –í–ª–æ–∂–µ–Ω–∏—è
      if (post.attachments && Array.isArray(post.attachments)) {
        for (const att of post.attachments) {
          if (att.type === 'photo' && att.photo && att.photo.sizes) {
            const photo = att.photo.sizes.sort((a, b) => b.width - a.width)[0];
            await bot.sendPhoto(tgUserId, photo.url);
          }
          if (att.type === 'doc' && att.doc && att.doc.url) {
            await bot.sendDocument(tgUserId, att.doc.url, { caption: att.doc.title || '' });
          }
          if (att.type === 'video' && att.video) {
            const videoUrl = "https://vk.com/video" + att.video.owner_id + "_" + att.video.id;
            await bot.sendMessage(tgUserId, "üé¨ <b>–í–∏–¥–µ–æ:</b> " + videoUrl, { parse_mode: 'HTML' });
          }
        }
      }

      // –û—Ç–º–µ—Ç–∏–º –ø–æ—Å—Ç –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π
      sentPosts[tgUserId][post.groupId].push(post.id);
      if (sentPosts[tgUserId][post.groupId].length > 1000) {
        sentPosts[tgUserId][post.groupId] = sentPosts[tgUserId][post.groupId].slice(-1000);
      }
    }
  }
}


setInterval(sendLatestVkPosts, 60 * 1000);

