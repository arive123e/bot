require('dotenv').config();

const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const fs = require('fs');   // <- –û–î–ò–ù —Ä–∞–∑!
const path = require('path');
const usersPath = '/root/vk-backend/users.json';

// –ü–æ–¥–≥—Ä—É–∂–∞–µ–º sentPosts –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç)
let sentPosts = {};
if (fs.existsSync('sentPosts.json')) {
  sentPosts = JSON.parse(fs.readFileSync('sentPosts.json', 'utf-8'));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ tg_id
function getUserData(tgId) {
  if (!fs.existsSync(usersPath)) return null;
  const users = JSON.parse(fs.readFileSync(usersPath, 'utf-8'));
  return Object.values(users).find(u => String(u.tg_id) === String(tgId) && u.status === 'ok');
}

const MAX_GROUPS_FREE = 5; // —Å–∫–æ–ª—å–∫–æ –≥—Ä—É–ø–ø –≤—ã–±—Ä–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ
const UNLIMITED_USERS = [792903459, 1022172210];
const groupTitles = {};

let userSelectedGroups = {};
if (fs.existsSync('userSelectedGroups.json')) {
  userSelectedGroups = JSON.parse(fs.readFileSync('userSelectedGroups.json', 'utf-8'));
}

const token = process.env.TELEGRAM_BOT_TOKEN;
const SUPPORT_CHAT_ID = -4778492984; // chat_id –≥—Ä—É–ø–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏

if (!token) {
  console.error('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω TELEGRAM_BOT_TOKEN –≤ .env');
  process.exit(1);
}

const bot = new TelegramBot(token, { polling: true });
const replyContext = {}; // –ö–æ–º—É –æ—Ç–≤–µ—á–∞–µ—Ç –º–∞–≥–∏—Å—Ç—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏

const MAX_TEXT_LENGTH = 2000;
const MAX_CAPTION_LENGTH = 1024; 

async function fetchGroupTitle(groupId, vkAccessToken) {
  try {
    const res = await axios.get('https://api.vk.com/method/groups.getById', {
      params: {
        group_id: Math.abs(groupId),
        access_token: vkAccessToken,
        v: '5.199'
      }
    });
    if (res.data.response && res.data.response[0]) {
      return res.data.response[0].name;
    }
    return null;
  } catch (e) {
    console.log('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã:', e?.response?.data || e.message || e);
    return null;
  }
}

// --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ ---
function formatVkPost(text, groupName, postUrl) {
  const boldGroup = `<b>${groupName}</b>`;
  let body = text && text.trim().length > 0
    ? `${boldGroup}\n\n${text.trim()}`
    : boldGroup;
  let needCut = body.length > MAX_TEXT_LENGTH;
  let visibleText = needCut
    ? body.slice(0, MAX_TEXT_LENGTH - 20) + '\n\n...–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ ‚¨áÔ∏è'
    : body;
  const buttons = [
    [{ text: "‚ú® –ü—Ä–∏–∑–≤–∞—Ç—å –≤–µ—Å—å –ø–æ—Å—Ç –≤ VK", url: postUrl }]
  ];
  return { text: visibleText, buttons };
}

// --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è caption (—Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã) ---
function formatVkCaption(text, groupName, postUrl) {
  const boldGroup = `<b>${groupName}</b>`;
  let body = text && text.trim().length > 0
    ? `${boldGroup}\n\n${text.trim()}`
    : boldGroup;
  let needCut = body.length > MAX_CAPTION_LENGTH;
  let visibleText = needCut
    ? body.slice(0, MAX_CAPTION_LENGTH - 20) + '\n\n...–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ ‚¨áÔ∏è'
    : body;
  const buttons = [
    [{ text: "‚ú® –ü—Ä–∏–∑–≤–∞—Ç—å –≤–µ—Å—å –ø–æ—Å—Ç –≤ VK", url: postUrl }]
  ];
  return { caption: visibleText, buttons };
}


// =========================
// 1. –°–¢–ê–†–¢, –ü–û–†–¢–ê–õ, –ü–†–ò–í–ï–¢–°–¢–í–ò–ï
// =========================

bot.onText(/\/start/, async (msg) => { // <--- –≤–æ—Ç –∑–¥–µ—Å—å –¥–æ–±–∞–≤—å async
  const chatId = msg.chat.id;
  const tgId = msg.from.id;
  const vkAuthUrl = `https://fokusnikaltair.xyz/vkid-auth.html?tg_id=${tgId}`;

  const welcomeText = `–ê–±—Ä–∞-–∫–∞–¥–∞–±—Ä–∞ –∏ –Ω–µ–º–Ω–æ–≥–æ –∫–æ–¥–∞ üßô‚Äç‚ôÇÔ∏è

–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–∏–∑–≤–∞–ª –§–æ–∫—É—Å–Ω–∏–∫–∞ –ê–ª—å—Ç–∞–∏—Ä–∞! –¢–µ–ø–µ—Ä—å –≤—Å–µ –≤–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏, —Ñ–æ—Ç–æ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ VK —Å–∞–º–∏ –ø–µ—Ä–µ–Ω–æ—Å—è—Ç—Å—è –≤ —Ç–≤–æ–π Telegram - –Ω–µ –ø–æ –ø—Ä–∏—Ö–æ—Ç–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤, –∞ –ø–æ –Ω–∞—Å—Ç–æ—è—â–µ–º—É –≤–æ–ª—à–µ–±—Å—Ç–≤—É.

–ó–∞–±—É–¥—å –æ–± —É–Ω—ã–ª–æ–π –∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π –ª–µ–Ω—Ç–µ: —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –º–∞–≥ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å—ë —Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –∏ –≤–∞–∂–Ω–æ–µ –æ–¥–Ω–∏–º —â–µ–ª—á–∫–æ–º –ø–∞–ª—å—Ü–µ–≤ (–∏ –∫–ª–∏–∫–æ–º –Ω–∞ –ø–æ—Ä—Ç–∞–ª).

–ù–æ –ø–æ–º–Ω–∏ - –º–∞–≥–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å —Ç–≤–æ–∏–º —É—á–∞—Å—Ç–∏–µ–º. –ê–∫—Ç–∏–≤–∏—Ä—É–π –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –∏ –Ω–∞—á–∏–Ω–∞–π –∫–æ–ª–¥–æ–≤–∞—Ç—å! ‚ú® 
`;

  // 1. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
  await bot.sendMessage(chatId, welcomeText, {
    reply_markup: {
      inline_keyboard: [
        [{ text: '–°–æ—Ç–≤–æ—Ä–∏—Ç—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ üåÄ', url: vkAuthUrl }]
      ]
    }
  });

  // 2. –°—Ä–∞–∑—É –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ ‚Äî reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ "–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥üî±"
  const sentWaitMsg = await bot.sendMessage(chatId, "–ê–∫—Ç–∏–≤–∏—Ä—É–π –ø–æ—Ä—Ç–∞–ª –∫–Ω–æ–ø–∫–æ–π –≤—ã—à–µ, –∑–∞—Ç–µ–º –∑–∞–≤–µ—Ä—à–∏ –ø–µ—Ä–µ—Ö–æ–¥ ‚ú®", {
    reply_markup: {
      keyboard: [
        ['–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥üî±']
      ],
      resize_keyboard: true,
      one_time_keyboard: true
    }
  });
  replyContext[tgId + '_waitMsg'] = sentWaitMsg.message_id;

  console.log(`üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${tgId}`);
});
// =========================
// 2. –ü–û–õ–ò–¢–ò–ö–ê –ö–û–ù–§–ò–î–ï–ù–¶–ò–ê–õ–¨–ù–û–°–¢–ò –∏ callback'–∏
// =========================

bot.on('callback_query', async (query) => {

  // === –ü–æ–º–æ—â—å: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π ===
if (query.data === "help_how") {
  await bot.editMessageText(
    "‚ú® <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>\n\n–ë–æ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –≤–∞–∂–Ω—ã–µ –ø–æ—Å—Ç—ã –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö VK-–≥—Ä—É–ø–ø –≤ —Ç–≤–æ–π Telegram. –í—Å—ë –∞–≤—Ç–æ–º–∞—Ç–æ–º –∏ –±–µ–∑ —Å–ø–∞–º–∞. –¢–æ–ª—å–∫–æ –≤–æ–ª—à–µ–±–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ ‚Äî –Ω–∏–∫–∞–∫–∏—Ö —Ö–∞–æ—Ç–∏—á–Ω—ã—Ö –ª–µ–Ω—Ç! ü™Ñ",
    {
      chat_id: query.message.chat.id,
      message_id: query.message.message_id,
      parse_mode: "HTML",
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "help_back" }]
        ]
      }
    }
  );
  return;
}
if (query.data === "help_auth") {
  await bot.editMessageText(
    "ü™Ñ <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</b>\n\n<b>–ü–æ—Ä—Ç–∞–ª –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è?</b>\n–°–º–µ–Ω–∏—Ç–µ –≤–æ–ª—à–µ–±–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç (–±—Ä–∞—É–∑–µ—Ä) –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á—É—Ç—å –ø–æ–∑–∂–µ. –ù–µ –ø–æ–º–æ–≥–ª–æ ‚Äî –ø–∏—à–∏—Ç–µ –º–∞–≥–∏—Å—Ç—Ä—É! üßô\n\n<b>–ó–∞—á–µ–º –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø–æ—Ä—Ç–∞–ª?</b>\n–ë–µ–∑ –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ –∫–ª—é—á–∞ –±–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –≤–∞–º –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –≤–∞—à–∏—Ö –≤–æ–ª—à–µ–±–Ω—ã—Ö –≥—Ä—É–ø–ø VK. üóùÔ∏è\n\n<b>–ü–æ—á–µ–º—É –Ω—É–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å —Ä–∏—Ç—É–∞–ª?</b>\n–ü–æ—Ä—Ç–∞–ª –º–æ–≥ –∑–∞–∫–∞–ø—Ä–∏–∑–Ω–∏—á–∞—Ç—å –∏–ª–∏ –∑–∞–±—ã—Ç—å –≤–∞—Å ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–π–¥–∏—Ç–µ –º–∞–≥–∏—é –µ—â—ë —Ä–∞–∑! üîÑ",
    {
      chat_id: query.message.chat.id,
      message_id: query.message.message_id,
      parse_mode: "HTML",
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "help_back" }]
        ]
      }
    }
  );
  return;
}
if (query.data === "help_groups") {
  await bot.editMessageText(
    "üìú <b>–†–∞–±–æ—Ç–∞ —Å –≥—Ä—É–ø–ø–∞–º–∏</b>\n\n<b>–ù–µ –≤–∏–∂—É –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É?</b>\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –æ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞—è ‚Äî –º–∞–≥–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤–∞–º–∏! ‚ú®\n\n<b>–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É?</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ –≥—Ä—É–ø–ø—ã –≤ —Å–ø–∏—Å–∫–µ, –±–æ—Ç –ø–æ–∫–∞–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –≤—ã –æ—Ç–º–µ—Ç–∏–ª–∏. üìù\n\n<b>–ü–æ—á–µ–º—É –Ω–æ–≤–æ—Å—Ç–∏ –Ω–µ –ø—Ä–∏—Ö–æ–¥—è—Ç?</b>\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—ã –∏ –Ω–µ –æ—Ç–∫–ª—é—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram. –ï—Å–ª–∏ —á—Ç–æ ‚Äî –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫! üì©\n\n<b>–ü–æ—á–µ–º—É –±–æ—Ç –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –≥—Ä—É–ø–ø—ã?</b>\n–ò–Ω–æ–≥–¥–∞ –º–∞–≥–∏—è –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–ª—è —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–∫—Ä—ã—Ç—ã –∞–≤—Ç–æ—Ä—Å–∫–∏–º–∏ —á–∞—Ä–∞–º–∏ –∏–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –∏–∑–±—Ä–∞–Ω–Ω—ã–º. –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –≤–∏–¥–µ—Ç—å –≤—Å–µ–º –≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≥—Ä—É–ø–ø–∞—Ö VK! üîí",
    {
      chat_id: query.message.chat.id,
      message_id: query.message.message_id,
      parse_mode: "HTML",
      reply_markup: {
        inline_keyboard: [
          [{ text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data: "help_back" }]
        ]
      }
    }
  );
  return;
}

// === –í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –ø–æ–º–æ—â–∏ ===
if (query.data === "help_back") {
  await bot.editMessageText('ü¶Ñ <b>–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b>', {
    chat_id: query.message.chat.id,
    message_id: query.message.message_id,
    parse_mode: "HTML",
    reply_markup: {
      inline_keyboard: [
        [{ text: "‚ú® –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç", callback_data: "help_how" }],
        [{ text: "ü™Ñ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–ø–æ—Ä—Ç–∞–ª)", callback_data: "help_auth" }],
        [{ text: "üìú –†–∞–±–æ—Ç–∞ —Å –≥—Ä—É–ø–ø–∞–º–∏", callback_data: "help_groups" }]
      ]
    }
  });
  return;
}
  // ======= –∫–æ–Ω–µ—Ü –±–ª–æ–∫–∞ –ø–æ–º–æ—â–∏ =======

  // --- –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã ---
if (query.data === 'search_group') {
  await bot.sendMessage(query.message.chat.id, 'üîç –í–≤–µ–¥–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:');
  userSelectedGroups[query.from.id + '_waitingForSearch'] = true;
  await bot.answerCallbackQuery(query.id);
  return;
}

// --- –í–æ–∑–≤—Ä–∞—Ç –∫ –ø–æ–ª–Ω–æ–º—É —Å–ø–∏—Å–∫—É –ø–æ—Å–ª–µ –ø–æ–∏—Å–∫–∞ ---
if (query.data === 'back_to_all_groups') {
  const userId = query.from.id;
  // –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö!
  const allGroups = userSelectedGroups[userId + '_fullList'] || [];
  const selectMsgId = userSelectedGroups[userId + '_selectMsgId'];
  userSelectedGroups[userId + '_isSearch'] = false;
  await showGroupSelection(bot, query.message.chat.id, userId, allGroups, 0, selectMsgId, false);
  await bot.answerCallbackQuery(query.id);
  return;
}
 

  // --- –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑ –≥—Ä—É–ø–ø—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ---
  if (query.data.startsWith('reply_')) {
    const userId = query.data.split('_')[1];
    replyContext[query.from.id] = userId;
    await bot.sendMessage(
      query.message.chat.id,
      `‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: ${userId}), –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø—Ä—è–º–æ –≤ —ç—Ç–æ—Ç —á–∞—Ç.`
    );
    await bot.answerCallbackQuery(query.id, { text: '–ñ–¥—É –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞!' });
    return;
  }

    // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏) ---
  if (query.data.startsWith('select_group:')) {
    const [_, groupId, page] = query.data.split(':');
    const userId = query.from.id;
    const groupIdNum = Number(groupId);

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø (–∏–ª–∏ –ø—É—Å—Ç–æ–π)
    if (!userSelectedGroups[userId]) userSelectedGroups[userId] = [];
    const selected = userSelectedGroups[userId];

     // --- –ü–†–ê–í–ò–õ–¨–ù–û: –∑–¥–µ—Å—å –ø–æ–ª—É—á–∞–µ—à—å allGroups –∏ selectMsgId!
    const allGroups = userSelectedGroups[userId + '_all'] || [];
    const selectMsgId = userSelectedGroups[userId + '_selectMsgId'];

    const isSearch = userSelectedGroups[userId + '_isSearch'] || false; 
    
     // –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞
   if (selected.includes(groupIdNum)) {
  userSelectedGroups[userId] = selected.filter(id => id !== groupIdNum);
  fs.writeFileSync('userSelectedGroups.json', JSON.stringify(userSelectedGroups, null, 2));
    } else {
      const isUnlimited = UNLIMITED_USERS.includes(userId);
if (!isUnlimited && selected.length >= MAX_GROUPS_FREE) {
  await bot.answerCallbackQuery(query.id, { 
    text: '‚ú® –û, —Å–∏–ª–∞ –º–∞–≥–∏–∏ –µ—â—ë –Ω–µ —Å—Ç–æ–ª—å –≤–µ–ª–∏–∫–∞!\n–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ 3 –≥—Ä—É–ø–ø—ã - –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã.', 
    show_alert: true 
  });
  return;
}
    userSelectedGroups[userId].push(groupIdNum);
  fs.writeFileSync('userSelectedGroups.json', JSON.stringify(userSelectedGroups, null, 2));
    }

     if (!groupTitles[groupIdNum]) {
    const userData = getUserData(userId);
    if (userData && userData.access_token) {
      const title = await fetchGroupTitle(groupIdNum, userData.access_token);
      if (title) {
        groupTitles[groupIdNum] = title;
        fs.writeFileSync('groupTitles.json', JSON.stringify(groupTitles, null, 2));
      }
    }
  }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
     await showGroupSelection(bot, query.message.chat.id, userId, allGroups, Number(page), selectMsgId, isSearch);
    await bot.answerCallbackQuery(query.id);
    return;
  }

  // --- –ü–∞–≥–∏–Ω–∞—Ü–∏—è –≥—Ä—É–ø–ø ---
  if (query.data.startsWith('groups_prev:') || query.data.startsWith('groups_next:')) {
    const isPrev = query.data.startsWith('groups_prev:');
    const page = Number(query.data.split(':')[1]);
    const userId = query.from.id;
    const allGroups = userSelectedGroups[userId + '_all'] || [];
    const selectMsgId = userSelectedGroups[userId + '_selectMsgId'];
    await showGroupSelection(bot, query.message.chat.id, userId, allGroups, Number(page), selectMsgId);
  }

  // --- "–ì–æ—Ç–æ–≤–æ" ---
if (query.data === 'groups_done') {
  const selectedGroups = userSelectedGroups[query.from.id] || [];
  if (selectedGroups.length) {
  const allGroups = userSelectedGroups[query.from.id + '_all'] || [];
  const selectedGroupsNames = selectedGroups.map(id => {
    const group = allGroups.find(g => g.id === id);
    return group
    ? `${group.name || group.screen_name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`
    : '–ì—Ä—É–ø–ø–∞ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
  });
  console.log(`[–í—ã–±–æ—Ä –≥—Ä—É–ø–ø] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${query.from.id} –≤—ã–±—Ä–∞–ª:\n` + selectedGroupsNames.join('\n'));

    
  
    await bot.sendMessage(query.message.chat.id,
      `<b>–ì—Ä—É–ø–ø—ã –≤—ã–±—Ä–∞–Ω—ã! ‚ö°Ô∏è</b>\n–°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –ª–µ–Ω—Ç–∞ –Ω–∞–ø–æ–ª–Ω–∏—Ç—Å—è –º–∞–≥–∏–µ–π –∏–º–µ–Ω–Ω–æ –¥–ª—è —Ç–µ–±—è.\n\n–ñ–¥–∏ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑:\n${selectedGroupsNames.map(name => `üî∏${name}`).join('\n')}`,
      { parse_mode: 'HTML' }
    );

    await sendFreshestPostForUser(query.from.id);
    
  } else {
    await bot.sendMessage(query.message.chat.id,
      '–¢—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–ª ‚Äî –Ω–æ –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è üòâ'
    );
  }
  await bot.answerCallbackQuery(query.id);
  return;
}


});

// =========================
// 3. –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê (reply-–∫–Ω–æ–ø–∫–∏)
// =========================

bot.on('message', async (msg) => {
 // --- –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã ---
if (userSelectedGroups[msg.from.id + '_waitingForSearch']) {
  delete userSelectedGroups[msg.from.id + '_waitingForSearch'];
  const allGroups = userSelectedGroups[msg.from.id + '_all'] || [];
  console.log('üîç [–ü–û–ò–°–ö] allGroups:', allGroups);
  const search = msg.text.trim().toLowerCase();
  console.log('üîç [–ü–û–ò–°–ö] search text:', search);
  const results = allGroups.filter(g =>
    (g.name && g.name.toLowerCase().includes(search)) ||
    (g.screen_name && g.screen_name.toLowerCase().includes(search)) ||
    (g.title && g.title.toLowerCase().includes(search))
  );
  console.log('üîç [–ü–û–ò–°–ö] results:', results);

  userSelectedGroups[msg.from.id + '_isSearch'] = true;
  
  if (!results.length) {
    await bot.sendMessage(msg.chat.id, '–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ.');
    const selectMsgId = userSelectedGroups[msg.from.id + '_selectMsgId'] || null;
    await showGroupSelection(bot, msg.chat.id, msg.from.id, results, 0, selectMsgId, true);

    return;
  }
  const selectMsgId = userSelectedGroups[msg.from.id + '_selectMsgId'] || null;
  await showGroupSelection(bot, msg.chat.id, msg.from.id, results, 0, selectMsgId, true);

  return;
}



  // 1. –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥
  if (msg.text === '–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥üî±') {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü–æ–¥–æ–∂–¥–∏, –º–∞–≥–∏—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è ‚ú®"
    const waitMsgId = replyContext[msg.from.id + '_waitMsg'];
    if (waitMsgId) {
      try { await bot.deleteMessage(msg.chat.id, waitMsgId); } catch(e){}
      delete replyContext[msg.from.id + '_waitMsg'];
    }

    const res = await axios.get(`https://api.fokusnikaltair.xyz/users/check?tg_id=${msg.from.id}`);
    if (res.data.success) {
      // –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–≤–µ—Å—Ç–µ + –∫–Ω–æ–ø–∫–∞ "–ì—Ä—É–ø–ø–∏—Å–æ –ø—Ä–∏–∑—ã–≤—É—Å! üìú"
      await bot.sendMessage(msg.chat.id, 
        `<b>üí´ –£—Ä–∞! –ö–≤–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω.</b>  \n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —É—é—Ç–Ω—ã–π –º–∏—Ä –Ω–æ–≤–æ—Å—Ç–µ–π.\n\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ: –ø—Ä–∏–∑–≤–∞—Ç—å –ª—é–±–∏–º—ã–µ –≥—Ä—É–ø–ø—ã –∏ –ø–æ–ª—É—á–∞—Ç—å –º–∞–≥–∏—á–µ—Å–∫–∏–µ –≤–µ—Å—Ç–∏ –ø—Ä—è–º–æ —Å—é–¥–∞.`,
        { parse_mode: 'HTML' }
      );
      const sentGroupWaitMsg = await bot.sendMessage(msg.chat.id, "–ì–æ—Ç–æ–≤—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ!", {
  reply_markup: {
    keyboard: [
      ['–ì—Ä—É–ø–ø–∏—Å–æ –ø—Ä–∏–∑—ã–≤—É—Å! üìú']
    ],
    resize_keyboard: true,
    one_time_keyboard: true
  }
});
replyContext[msg.from.id + '_groupWaitMsg'] = sentGroupWaitMsg.message_id;
    } else {
      await bot.sendMessage(msg.chat.id, 
        `<b>–£–ø—Å, –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –≤ –¥—É—Ö–µ üòî</b>\n\n–ü–µ—Ä–µ—Ö–æ–¥ –ø–æ–∫–∞ –Ω–µ —É–¥–∞–ª—Å—è, –Ω–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π - —Ç–∞–∫–æ–µ –±—ã–≤–∞–µ—Ç –¥–∞–∂–µ —É —Å–∞–º—ã—Ö –æ–ø—ã—Ç–Ω—ã—Ö –º–∞–≥–æ–≤!\n\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –¥–∞–π –º–∞–≥–∏—Å—Ç—Ä—É –∑–Ω–∞—Ç—å, –µ—Å–ª–∏ —á–∞—Ä—ã –Ω–µ —Å–ª—É—à–∞—é—Ç—Å—è. üßô‚Äç‚ôÇÔ∏è‚ú®`,
        { parse_mode: 'HTML', reply_markup: { remove_keyboard: true } }
      );
    }
    return;
  }


 // 2. –ì—Ä—É–ø–ø–∏—Å–æ –ø—Ä–∏–∑—ã–≤—É—Å!
if (msg.text === '–ì—Ä—É–ø–ø–∏—Å–æ –ø—Ä–∏–∑—ã–≤—É—Å! üìú') {
  // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ì–æ—Ç–æ–≤—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ!"
  const groupWaitMsgId = replyContext[msg.from.id + '_groupWaitMsg'];
  if (groupWaitMsgId) {
    try { await bot.deleteMessage(msg.chat.id, groupWaitMsgId); } catch(e){}
    delete replyContext[msg.from.id + '_groupWaitMsg'];
  }

  // 2.1 –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–∞–Ω–∏–µ
  await bot.sendMessage(msg.chat.id, 
    `<b>‚ú® –ü–æ—Å–ª–∞–Ω–∏–µ –æ—Ç —Å—Ç—Ä–∞–∂–µ–π –ø–æ—Ä—Ç–∞–ª–∞</b>\n–í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏, –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –≤–∏–¥–µ–æ –ø—Ä–∏—Ö–æ–¥—è—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≥—Ä—É–ø–ø VK.\n\n–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –≤–∏–¥–Ω–æ - –∑–Ω–∞—á–∏—Ç, –º–∞–≥–∏—è —á—É—Ç—å-—á—É—Ç—å —É—Å—Ç–∞–ª–∞ –∏ –Ω–µ —Å–º–æ–≥–ª–∞ –ø—Ä–æ–π—Ç–∏ –∑–∞—â–∏—Ç—É —á–∞—Ä.`,
    { parse_mode: 'HTML', reply_markup: { remove_keyboard: true } }
  );

  // 2.2 –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥—Ä—É–ø–ø—ã —Å –±—ç–∫–µ–Ω–¥–∞
  try {
    const res = await axios.get(`https://api.fokusnikaltair.xyz/users/groups?tg_id=${msg.from.id}`);
    if (!res.data.success || !res.data.groups || !Array.isArray(res.data.groups)) {
      await bot.sendMessage(msg.chat.id, '–ú–∞–≥–∏—è –Ω–µ —Å–º–æ–≥–ª–∞ –Ω–∞–π—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!');
      return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    userSelectedGroups[msg.from.id] = [];

       // —Å–æ—Ö—Ä–∞–Ω—è–µ–º "–æ—Å–Ω–æ–≤–Ω–æ–π" –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫
    userSelectedGroups[msg.from.id + '_all'] = res.data.groups;
    userSelectedGroups[msg.from.id + '_fullList'] = res.data.groups;

    // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∂–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å –≥—Ä—É–ø–ø–∞–º–∏ (–ø–æ 10 —à—Ç—É–∫, –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
    userSelectedGroups[msg.from.id + '_all'] = res.data.groups;
    await showGroupSelection(bot, msg.chat.id, msg.from.id, res.data.groups, 0, null);

  } catch (e) {
    await bot.sendMessage(msg.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–ø–ø üò•');
  }
  return;
}


  // --- –ü–æ–¥–¥–µ—Ä–∂–∫–∞: –æ—Ç–≤–µ—Ç—ã –º–∞–≥–∏—Å—Ç—Ä–∞ ---
  if (replyContext[msg.from.id] && msg.chat.id === SUPPORT_CHAT_ID) {
    const targetUserId = replyContext[msg.from.id];
    bot.sendMessage(targetUserId, `üßô –ú–∞–≥–∏—Å—Ç—Ä –±–æ—Ç–∞ –æ—Ç–≤–µ—á–∞–µ—Ç:\n${msg.text}`);
    bot.sendMessage(msg.chat.id, "‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!");
    delete replyContext[msg.from.id];
    return;
  }

  // --- –ü–æ–¥–¥–µ—Ä–∂–∫–∞: –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
  if (
    msg.chat.id === SUPPORT_CHAT_ID ||
    (msg.text && msg.text.startsWith('/')) ||
    msg.from.is_bot
  ) return;

  bot.sendMessage(SUPPORT_CHAT_ID,
    `üßô –í–æ–ø—Ä–æ—Å –æ—Ç @${msg.from.username || msg.from.id} (ID: ${msg.from.id}):\n${msg.text}`, {
      reply_markup: {
        inline_keyboard: [
          [{
            text: "–û—Ç–≤–µ—Ç–∏—Ç—å",
            callback_data: `reply_${msg.from.id}`
          }]
        ]
      }
    }
  );
});

// --- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ /support ---
bot.onText(/\/support/, (msg) => {
  bot.sendMessage(msg.chat.id,
    "–ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å, –ø–æ–∂–µ–ª–∞–Ω–∏–µ –∏–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏! –ú–∞–≥–∏—Å—Ç—Ä –ø—Ä–æ—á–∏—Ç–∞–µ—Ç –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç. –¢–≤–æ–π Telegram –Ω–∏–∫ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Å–∫—Ä—ã—Ç, –∞ –º–∞–≥–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —É–∂–µ —Ä—è–¥–æ–º! ‚úâÔ∏è"
  );
});

//===================–ö–ù–û–ü–ö–ê –ü–û–ú–û–©–¨====================
bot.onText(/\/help/, async (msg) => {
  await bot.sendMessage(msg.chat.id, 'ü¶Ñ <b>–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b>', {
    parse_mode: "HTML",
    reply_markup: {
      inline_keyboard: [
        [{ text: "‚ú® –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç", callback_data: "help_how" }],
        [{ text: "ü™Ñ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", callback_data: "help_auth" }],
        [{ text: "üìú –†–∞–±–æ—Ç–∞ —Å –≥—Ä—É–ø–ø–∞–º–∏", callback_data: "help_groups" }]
      ]
    }
  });
});


async function showGroupSelection(bot, chatId, userId, allGroups, page = 0, messageId = null, isSearch = false) {
  const MAX_GROUPS_PER_PAGE = 10;
  const selected = userSelectedGroups[userId] || [];
  let inline_keyboard = [];
  let text = "";

  if (!isSearch) {
    // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º: –ø–∞–≥–∏–Ω–∞—Ü–∏—è –∏ –≤—ã–±–æ—Ä
    const start = page * MAX_GROUPS_PER_PAGE;
    const pageGroups = allGroups.slice(start, start + MAX_GROUPS_PER_PAGE);

    inline_keyboard = pageGroups.map((group, idx) => {
      const isSelected = selected.includes(group.id);
      const groupNumber = start + idx + 1;
      return [{
        text: (isSelected ? '‚úÖ ' : '') + `${groupNumber}. ` + (group.name || group.screen_name || `ID${group.id}`),
        callback_data: `select_group:${group.id}:${page}`
      }];
    });

    // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    const navButtons = [];
    if (page > 0) navButtons.push({ text: '‚¨ÖÔ∏è', callback_data: `groups_prev:${page - 1}` });
    navButtons.push({ text: '‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data: 'groups_done' });
    if (allGroups.length > start + MAX_GROUPS_PER_PAGE) navButtons.push({ text: '‚û°Ô∏è', callback_data: `groups_next:${page + 1}` });
    inline_keyboard.push(navButtons);
    inline_keyboard.push([{ text: 'üîé –ü–æ–∏—Å–∫', callback_data: 'search_group' }]);
    text = `ü¶Ñ –£ —Ç–µ–±—è –∞–∂ <b>${allGroups.length}</b> –º–∞–≥–∏—á–µ—Å–∫–∏—Ö –≥—Ä—É–ø–ø!\n–ö–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è —É –Ω–∞—Å –Ω–∞—Å—Ç—Ä–æ–π? –ö–æ—Ç–∏–∫–∏? –ù–æ–≤–æ—Å—Ç–∏? –¢—ã–∫-—Ç—ã–∫ ‚Äî –≤—ã–±–∏—Ä–∞–π!`;

  } else {
    // üî• –†–ï–ñ–ò–ú –ü–û–ò–°–ö–ê ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
    const start = page * MAX_GROUPS_PER_PAGE;
    const pageGroups = allGroups.slice(start, start + MAX_GROUPS_PER_PAGE);

    inline_keyboard = pageGroups.map((group, idx) => {
      const isSelected = selected.includes(group.id);
      const groupNumber = start + idx + 1;
      return [{
        text: (isSelected ? '‚úÖ ' : '') + `${groupNumber}. ` + (group.name || group.screen_name || `ID${group.id}`),
        callback_data: `select_group:${group.id}:${page}`
      }];
    });

    // –ö–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞/–≤–æ–∑–≤—Ä–∞—Ç–∞/–≥–æ—Ç–æ–≤–æ ‚Äî –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π!
    inline_keyboard.push([{ text: 'üîé –ü–æ–∏—Å–∫', callback_data: 'search_group' }]);
    inline_keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_all_groups' }]);
    inline_keyboard.push([{ text: '‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data: 'groups_done' }]);

    text = `üîç –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø: <b>${allGroups.length}</b>\n–ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥.`;
  }

  userSelectedGroups[userId + '_all'] = allGroups;

  if (messageId) {
    await bot.editMessageText(text, {
      chat_id: chatId,
      message_id: messageId,
      parse_mode: 'HTML',
      reply_markup: { inline_keyboard }
    });
  } else {
    const sent = await bot.sendMessage(chatId, text, {
      parse_mode: 'HTML',
      reply_markup: { inline_keyboard }
    });
    userSelectedGroups[userId + '_selectMsgId'] = sent.message_id;
  }
}


//===============================================–¢–ï–°–¢–û–í–´–ô –ü–û–°–¢==============================================
async function sendFreshestPostForUser(tgUserId) {
  const selectedGroupIds = userSelectedGroups[tgUserId];
  if (!Array.isArray(selectedGroupIds) || !selectedGroupIds.length) return;
  const userData = getUserData(tgUserId);
  if (!userData || !userData.access_token) return;
  const vkAccessToken = userData.access_token;

  let freshestPost = null;
  let freshestGroup = null;

  for (const groupId of selectedGroupIds) {
    const owner_id = -Math.abs(groupId);
    try {
      const res = await axios.get('https://api.vk.com/method/wall.get', {
        params: { 
          owner_id, 
          count: 3, // <-- —Ç—Ä–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–∞ —Å –≥—Ä—É–ø–ø—ã
          access_token: vkAccessToken, 
          v: '5.199' 
        }
      });
      const posts = (res.data.response && res.data.response.items) ? res.data.response.items : [];
      // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ —Ä–µ–∫–ª–∞–º—É –∏ –Ω–µ –∑–∞–∫—Ä–µ–ø
      const validPosts = posts.filter(post =>
        !post.marked_as_ads && // <-- –Ω–µ —Ä–µ–∫–ª–∞–º–∞
        !post.is_pinned       // <-- –Ω–µ –∑–∞–∫—Ä–µ–ø
      );
      if (validPosts.length) {
        const post = validPosts[0]; // —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π –∏–∑ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
        if (!freshestPost || post.date > freshestPost.date) {
          freshestPost = post;      // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –≥—Ä—É–ø–ø
          freshestGroup = groupId;
        }
      }
    } catch (e) {
      // –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏:
      // console.error(`[wall.get] ${groupId}:`, e?.response?.data || e.message);
    }
  }

  // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ—Å—Ç–æ–≤, –≤—ã—Ö–æ–¥–∏–º
  if (!freshestPost) return;
// -----------------–æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è---------------------------------------
// –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const allGroups = userSelectedGroups[tgUserId + '_all'] || [];
// –ò—â–µ–º –æ–±—ä–µ–∫—Ç –≥—Ä—É–ø–ø—ã –ø–æ id
const groupInfo = allGroups.find(g => String(g.id) === String(freshestGroup));
// –ù–∞–∑–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ "–ì—Ä—É–ø–ø–∞"
const groupName = groupInfo ? groupInfo.name : "–ì—Ä—É–ø–ø–∞";

// –î–∞–ª—å—à–µ –≤—Å—ë –∫–∞–∫ –±—ã–ª–æ:
const isTextExists = (freshestPost.text && freshestPost.text.trim().length > 0);
const boldGroup = `<b>${groupName}</b>`;
const caption = isTextExists
  ? `${boldGroup}\n\n${freshestPost.text.trim()}`
  : boldGroup;


// 3. –ö–Ω–æ–ø–∫–∞ –Ω–∞ –ø–æ—Å—Ç
const postUrl = `https://vk.com/wall${-Math.abs(freshestGroup)}_${freshestPost.id}`;
const buttons = [
  [{ text: 'üßô‚Äç‚ôÇÔ∏è –û—Ç–∫—Ä—ã—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫', url: postUrl }]
];

// 4. –†–∞–∑–±–∏—Ä–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è
const attachments = freshestPost.attachments || [];
const photos = attachments.filter(att => att.type === 'photo');
const docs = attachments.filter(att => att.type === 'doc');
const videos = attachments.filter(att => att.type === 'video');

if (photos.length === 1) {
  // –û–¥–∏–Ω–æ—á–Ω–∞—è —Ñ–æ—Ç–∫–∞: –ø–æ–¥–ø–∏—Å—å –∏ –∫–Ω–æ–ø–∫–∞ –ø—Ä—è–º–æ –ø–æ–¥ —Ñ–æ—Ç–æ
  const photo = photos[0].photo.sizes.sort((a, b) => b.width - a.width)[0];
  const { caption, buttons } = formatVkCaption(freshestPost.text, groupName, postUrl);
  await bot.sendPhoto(tgUserId, photo.url, {
    caption: caption,
    parse_mode: 'HTML',
    reply_markup: { inline_keyboard: buttons }
  });

} else if (photos.length > 1) {
  // –ê–ª—å–±–æ–º: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ
  const media = photos.map(att => {
    const photo = att.photo.sizes.sort((a, b) => b.width - a.width)[0];
    return { type: 'photo', media: photo.url };
  });
  const messages = await bot.sendMediaGroup(tgUserId, media);

  // –¢–µ–∫—Å—Ç-–ø–æ—Å—Ç (—Å –∫–Ω–æ–ø–∫–æ–π –∏ –æ–±—Ä–µ–∑–∫–æ–π) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º reply –Ω–∞ –ø–µ—Ä–≤—É—é —Ñ–æ—Ç–∫—É
  const replyToId = messages[0].message_id;
  const { text, buttons } = formatVkPost(freshestPost.text, groupName, postUrl);
  await bot.sendMessage(tgUserId, text, {
    parse_mode: 'HTML',
    reply_markup: { inline_keyboard: buttons },
    reply_to_message_id: replyToId
  });

} else if (isTextExists) {
  // –ù–µ—Ç —Ñ–æ—Ç–æ ‚Äî –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π –∏ –æ–±—Ä–µ–∑–∫–æ–π
  const { text, buttons } = formatVkPost(freshestPost.text, groupName, postUrl);
  await bot.sendMessage(tgUserId, text, {
    parse_mode: 'HTML',
    reply_markup: { inline_keyboard: buttons }
  });
}

// 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –≤–∏–¥–µ–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–ø–æ –∂–µ–ª–∞–Ω–∏—é –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ)
for (const att of docs) {
  // –û–±—Ä–µ–∑–∞–µ–º caption –¥–æ 1024 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –¥–æ–±–∞–≤–ª—è–µ–º "...–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ ‚¨áÔ∏è" –µ—Å–ª–∏ —á—Ç–æ
  let docCaption = att.doc.title || '';
  if (docCaption.length > MAX_CAPTION_LENGTH) {
    docCaption = docCaption.slice(0, MAX_CAPTION_LENGTH - 20) + '\n\n...–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ ‚¨áÔ∏è';
  }
  await bot.sendDocument(tgUserId, att.doc.url, {
    caption: docCaption,
    parse_mode: 'HTML'
  });
}

for (const att of videos) {
  const videoUrl = `https://vk.com/video${att.video.owner_id}_${att.video.id}`;
  await bot.sendMessage(tgUserId, "üé¨ <b>–í–∏–¥–µ–æ:</b> " + videoUrl, { parse_mode: 'HTML' });
}

  // –û–±–Ω–æ–≤–ª—è–µ–º –û–ë–©–£–Æ –≥—Ä–∞–Ω–∏—Ü—É (borderDate) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞ –Ω–µ –¥–ª—è –≥—Ä—É–ø–ø—ã!)
  sentPosts[tgUserId] = sentPosts[tgUserId] || {};
  sentPosts[tgUserId].borderDate = freshestPost.date;
  fs.writeFileSync('sentPosts.json', JSON.stringify(sentPosts, null, 2));
}


// ========================================= [–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –†–ê–°–°–´–õ–ö–ê VK-–ü–û–°–¢–û–í –ö–ê–ñ–î–´–ï 30 –ú–ò–ù–£–¢] =====================================

async function sendLatestVkPosts() {
  for (const userKey in userSelectedGroups) {
    if (!/^\d+$/.test(userKey)) continue; // –¢–æ–ª—å–∫–æ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const tgUserId = Number(userKey);
    const selectedGroupIds = userSelectedGroups[tgUserId];
    if (!Array.isArray(selectedGroupIds) || !selectedGroupIds.length) continue;

    const userData = getUserData(tgUserId);
    if (!userData || !userData.access_token) continue;
    const vkAccessToken = userData.access_token;

    sentPosts[tgUserId] = sentPosts[tgUserId] || {};

    let allNewPosts = [];

    // –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±—â–∞—è –¥–ª—è –≤—Å–µ—Ö –≥—Ä—É–ø–ø!)
    const borderDate = sentPosts[tgUserId].borderDate || 0;

    // –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –∏–∑ –≤—Å–µ—Ö –≥—Ä—É–ø–ø, –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–≥–æ –ø–æ—Å–ª–µ borderDate
    for (const groupId of selectedGroupIds) {
      const owner_id = -Math.abs(groupId);
      try {
        const res = await axios.get('https://api.vk.com/method/wall.get', {
          params: {
            owner_id,
            count: 5, // –ú–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å, –µ—Å–ª–∏ –º–Ω–æ–≥–æ –∑–∞–∫—Ä–µ–ø–æ–≤/—Ä–µ–∫–ª–∞–º—ã
            access_token: vkAccessToken,
            v: '5.199'
          }
        });

        const posts = (res.data.response && res.data.response.items) ? res.data.response.items : [];
        const nonAdPosts = posts.filter(post => !post.marked_as_ads && !post.is_pinned);

        // –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –ø–æ—Å–ª–µ borderDate
        const freshPosts = nonAdPosts.filter(post => post.date > borderDate);

        freshPosts.forEach(post => {
          allNewPosts.push({ ...post, groupId, owner_id });
        });
      } catch (e) {
        console.log('üî¥ [–û—à–∏–±–∫–∞ wall.get]:', e?.response?.data || e.message || e);
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (—Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–≤—ã–º–∏)
    allNewPosts.sort((a, b) => a.date - b.date);

    if (!allNewPosts.length) continue;

    // ================================–í–õ–û–ñ–ï–ù–ò–Ø –î–õ–Ø –†–ê–°–°–´–õ–ö–ò –ü–û–°–¢–û–í================================
const post = allNewPosts[0];

// –ü–æ–ª—É—á–∞–µ–º –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const allGroups = userSelectedGroups[tgUserId + '_all'] || [];
// –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É –ø–æ id
const groupInfo = allGroups.find(g => String(g.id) === String(post.groupId));
// –ü–æ–ª—É—á–∞–µ–º –∏–º—è –≥—Ä—É–ø–ø—ã –∏–ª–∏ fallback "–ì—Ä—É–ø–ø–∞"
const groupName = groupInfo ? groupInfo.name : "–ì—Ä—É–ø–ø–∞";

// –î–∞–ª—å—à–µ –≤—Å—ë –∫–∞–∫ —Ä–∞–Ω—å—à–µ
const isTextExists = (post.text && post.text.trim().length > 0);
const boldGroup = `<b>${groupName}</b>`;
const caption = isTextExists
  ? `${boldGroup}\n\n${post.text.trim()}`
  : boldGroup;

const postUrl = `https://vk.com/wall${post.owner_id}_${post.id}`;
const buttons = [
  [{ text: 'üßô‚Äç‚ôÇÔ∏è –û—Ç–∫—Ä—ã—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫', url: postUrl }]
];

const attachments = post.attachments || [];
const photos = attachments.filter(att => att.type === 'photo');
const docs = attachments.filter(att => att.type === 'doc');
const videos = attachments.filter(att => att.type === 'video');

if (photos.length === 1) {
  // –û–¥–∏–Ω–æ—á–Ω–∞—è —Ñ–æ—Ç–∫–∞ ‚Äî –ø–æ–¥–ø–∏—Å—å –∏ –∫–Ω–æ–ø–∫–∞ –ø—Ä—è–º–æ –ø–æ–¥ —Ñ–æ—Ç–æ
  const photo = photos[0].photo.sizes.sort((a, b) => b.width - a.width)[0];
const { caption, buttons } = formatVkCaption(post.text, groupName, postUrl);
await bot.sendPhoto(tgUserId, photo.url, {
  caption: caption,
  parse_mode: 'HTML',
  reply_markup: { inline_keyboard: buttons }
});
} else if (photos.length > 1) {
  // –ê–ª—å–±–æ–º: –≤—Å–µ —Ñ–æ—Ç–æ –æ–¥–Ω–æ–π –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–æ–π, caption –∏ –∫–Ω–æ–ø–∫–∞ reply –Ω–∞ –ø–µ—Ä–≤—É—é —Ñ–æ—Ç–∫—É
  const media = photos.map(att => {
    const photo = att.photo.sizes.sort((a, b) => b.width - a.width)[0];
    return { type: 'photo', media: photo.url };
  });
  const messages = await bot.sendMediaGroup(tgUserId, media);
const replyToId = messages[0].message_id;
const { text, buttons } = formatVkPost(post.text, groupName, postUrl);
await bot.sendMessage(tgUserId, text, {
  parse_mode: 'HTML',
  reply_markup: { inline_keyboard: buttons },
  reply_to_message_id: replyToId
});
} else {
  // –ù–µ—Ç —Ñ–æ—Ç–æ: –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –µ—Å—Ç—å
  if (isTextExists) {
  const { text, buttons } = formatVkPost(post.text, groupName, postUrl);
  await bot.sendMessage(tgUserId, text, {
    parse_mode: 'HTML',
    reply_markup: { inline_keyboard: buttons }
  });
}

// –î–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
for (const att of docs) {
  let docCaption = att.doc.title || '';
  if (docCaption.length > MAX_CAPTION_LENGTH) {
    docCaption = docCaption.slice(0, MAX_CAPTION_LENGTH - 20) + '\n\n...–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ ‚¨áÔ∏è';
  }
  await bot.sendDocument(tgUserId, att.doc.url, {
    caption: docCaption,
    parse_mode: 'HTML'
  });
}
  
// –í–∏–¥–µ–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
for (const att of videos) {
  const videoUrl = `https://vk.com/video${att.video.owner_id}_${att.video.id}`;
  await bot.sendMessage(tgUserId, "üé¨ <b>–í–∏–¥–µ–æ:</b> " + videoUrl, { parse_mode: 'HTML' });
 }
} 

    // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –û–ë–©–£–Æ ‚Äú–≥—Ä–∞–Ω–∏—Ü—É‚Äù –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    sentPosts[tgUserId].borderDate = post.date;

    // --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ ---
    fs.writeFileSync('sentPosts.json', JSON.stringify(sentPosts, null, 2));
  }
}

// –¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ –æ–¥–Ω–æ–π ‚Äú–ª–µ–Ω—Ç–µ‚Äù, –∞ –Ω–µ –ø–æ –≥—Ä—É–ø–ø–∞–º!
setInterval(sendLatestVkPosts, 60 * 1000);
